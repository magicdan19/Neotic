<?xml version="1.0"?>
  <robot xmlns:xacro="http://www.ros.org/wiki/xacro">
   <!--Friction for joints-->
    <xacro:property name="friction_val" value="0.15"/>
    <xacro:macro name="box_link" params="link_name length width height material mass *origin">
    <link name="${link_name}_link">
      <!--If you do not explicitly specify a <collision> element. Gazebo will 
      treat your link as "invisible" to laser scanners and collision checking-->
      <collision>
        <geometry>
          <box size="${length} ${width} ${height}"/>
        </geometry>
        <!-- line below allows us to insert:<origin rpy="${rpy}" xyz="${xyz}"/>-->
        <xacro:insert_block name="origin" />
      </collision>
      
      <visual>
        <geometry>
          <!--box dimensions is Meters. L X W X H where the L X H is a ractange, 
              and the H extrudes it upwards -->
          <box size="${length} ${width} ${height}"/>
        </geometry>
        <!-- line below allows us to insert:<origin rpy="${rpy}" xyz="${xyz}"/>-->
        <xacro:insert_block name="origin" />
        <material name="${material}"/>
      </visual>
      
      
      <inertial>
        <!-- line below allows us to insert:<origin rpy="${rpy}" xyz="${xyz}"/>-->
        <xacro:insert_block name="origin" />
        <!--all blocks now need a 'mass' argument-->
        <mass value="${mass}"/>
        <!--This is the 3x3 inertial matrix. See: https://wiki.ros.org/urdf/XML/link -->
        <!--where x=length; y=width; z=height. these lines of code came from 
        Emiliano Borghi's project-->
        <inertia
          ixx="${mass*(width*width+height*height)/12}" 
    	  ixy = "0" 
    	  ixz = "0"
    	  iyy="${mass*(length*length+height*height)/12}" 
    	  iyz = "0"
    	  izz="${mass*(length*length+height*height)/12}"/>
      </inertial>      
      
    </link>
  </xacro:macro>

3
  <!--&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&& CYLINDER &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&-->
  <!-- This macro defines a cylinder link. This makes creating a box link    -->
  <!-- much easier and cleaner. The parameters are as follows:               -->
  <!-- link_name - the string that represents the link                       -->
  <!-- length - this is the length of the cylinder in meters                 -->
  <!-- radius - the radius of the cylinder in meters                         -->
  <!-- *origin - this is the rpy - the roll, pitch and yaw. This allows us   -->
  <!--           to rotate the item about all 3 axis (in radians). It is     -->
  <!--           also the xyz, which allows us to move the item along all 3  -->
  <!--           axis from a reference point. We type this line directly in  -->
  <!--           rather then defining 6 seperate constants per cylinder!     -->
  <!-- material - this is the rviz color of the item                         -->
  <!-- mass - this is the kg value of the item (estimated) to make gazebo    -->
  <!--        happy                                                          -->
  <!-- NOTE: the astrix means that you have to physically type the line as an-->
  <!--       argument when using (as well as insering a xacro:insert_block...-->
  <!--       See: https://wiki.ros.org/urdf/Tutorials/Using%20Xacro%20to%20Clean%20Up%20a%20URDF%20File#Parameterized_Macro -->
  <xacro:macro name="cylinder_link" params="link_name length radius material mass *origin">
    <link name="${link_name}_link">3
      <!--If you do not explicitly specify a <collision> element. Gazebo will 
      treat your link as "invisible" to laser scanners and collision checking-->
      <collision>
        <geometry>
          <cylinder length="${length}" radius="${radius}"/>
        </geometry>
        <xacro:insert_block name="origin" />
      </collision>

      <visual>
        <geometry>
          <cylinder length="${length}" radius="${radius}"/>
        </geometry>
          <!-- roll pitch and yaw will move the item in 3D space to arrange it how
               we want it in relation to the origin. the XYZ is to move it around
             the 3D space relative to the origin. Note that 1.57075 is pi/2 -->
        <xacro:insert_block name="origin" />
        <material name="${material}"/>
      </visual>
      
      <!--TODO-->
      <inertial>
        <!-- line below allows us to insert:<origin rpy="${rpy}" xyz="${xyz}"/>-->
        <xacro:insert_block name="origin" />
        <!--all blocks now need a 'mass' argument-->
        <mass value="${mass}"/>
        
        <!--This is the 3x3 inertial matrix. See: https://wiki.ros.org/urdf/XML/link -->
        <inertia
          ixx="${mass*(3*radius*radius+length*length)/12}" 
    	  ixy = "0" 
    	  ixz = "0"
    	  iyy="${mass*(3*radius*radius+length*length)/12}" 
    	  iyz = "0"
    	  izz="${mass*radius*radius/2}"
        />
      </inertial>

    </link>
  </xacro:macro>


  <!--&&&&&&&&&&&&&&&&&&&&&&&& CONTINUOUS JOINT &&&&&&&&&&&&&&&&&&&&&&&&&&&&&-->
  <!-- This macro defines a continuous joint. This makes creating a          -->
  <!-- continuous joint much easier and cleaner. The parameters are as       -->
  <!-- follows:                                                              -->
  <!-- name - the string that represents the joint                           -->
  <!-- rpy - the roll, pitch and yaw. This is always 0 0 0                   -->
  <!-- xyz - this defines the axis around which the continuous joint will    -->
  <!--       roll around.                                                    -->
  <!-- parent - this is the parent link to which the child will connect      -->
  <!-- child - this is the child link                                        -->
  <!-- *origin - this is the rpy and xyz point at which the child connects to-->
  <!--           the parent. this is entered as a block. everything is in    -->
  <!--           meters and radians                                          -->
  <!-- NOTE: the astrix means that you have to physically type the line as an-->
  <!--       argument when using (as well as insering a xacro:insert_block...-->
  <!--       See: https://wiki.ros.org/urdf/Tutorials/Using%20Xacro%20to%20Clean%20Up%20a%20URDF%20File#Parameterized_Macro -->
  <xacro:macro name="continuous_joint" params="name rpy xyz parent child friction *origin">
    <joint name="${name}_joint" type="continuous">
      <axis rpy="${rpy}" xyz="${xyz}"/>
      <parent link="${parent}_link"/>
      <child link="${child}_link"/>
      <!-- this is the point at which the two parts attach to one another    -->
      <xacro:insert_block name="origin" />
      <!--This introduces friction so that continious joints don't spin indefinitly
      damping is only used in Gazebo4 and earlier.... -->
      <dynamics damping="0.0" friction="${friction}"/> 
    </joint>
  </xacro:macro>



  <!--&&&&&&&&&&&&&&&&&&&&&&&&&&&&& FIXED JOINT &&&&&&&&&&&&&&&&&&&&&&&&&&&&&-->
  <!-- This macro defines a continuous joint. This makes creating a          -->
  <!-- continuous joint much easier and cleaner. The parameters are as       -->
  <!-- follows:                                                              -->
  <!-- name - the string that represents the joint                           -->
  <!-- parent - this is the parent link to which the child will connect      -->
  <!-- child - this is the child link                                        -->
  <!-- *origin - this is the rpy and xyz point at which the child connects to-->
  <!--           the parent. this is entered as a block. everything is in    -->
  <!--           meters and radians                                          -->
  <!-- NOTE: the astrix means that you have to physically type the line as an-->
  <!--       argument when using (as well as insering a xacro:insert_block...-->
  <!--       See: https://wiki.ros.org/urdf/Tutorials/Using%20Xacro%20to%20Clean%20Up%20a%20URDF%20File#Parameterized_Macro -->
  <xacro:macro name="fixed_joint" params="name parent child *origin">
    <joint name="${name}_joint" type="fixed">
      <parent link="${parent}_link"/>
      <child link="${child}_link"/>
      <!-- this is the point at which the two parts attach to one another    -->
      <xacro:insert_block name="origin" />
    </joint>
  </xacro:macro>
  <!--======================END ofPART #2 - MACROS===========================-->
  <!--=======================================================================-->


    <!--left and right castor mount plate size (both are same size)-->
    <xacro:property name="castor_mount_link_length_width_height" value="-0.58 -0.005 -0.110" />
    <xacro:property name="castor_mount_link_length" value="0.1145" />
    <xacro:property name="castor_mount_link_width" value="0.10" />
    <xacro:property name="castor_mount_link_height" value="0.0057" />
    <xacro:property name="castor_mount_link_mass" value="0.01"/> <!--0.25 kg-->

    <!--dummy link to give castors rotation about the Z axis-->
    <xacro:property name="castor_mount_dummy_link_length" value="0.02" />
    <xacro:property name="castor_mount_dummy_link_width" value="0.02" />
    <xacro:property name="castor_mount_dummy_link_height" value="0.02" />
    <xacro:property name="castor_mount_dummy_link_mass" value="0.01"/> <!--0.25 kg-->

    <!-- left and right castor wheels (both are same size) -->
    <xacro:property name="castor_wheel_length" value="0.03" />
    <xacro:property name="castor_wheel_radius" value="0.03" />
    <xacro:property name="castor_wheel_mass" value="0.01"/> <!--2 kg-->


  

    <gazebo reference="right_castor_wheel_link">
      <material>Gazebo/Black</material>
      <!--tags are from: http://gazebosim.org/tutorials/?tut=ros_urdf-->
      <!--These values fixed the robot from bouncing side to side:
          Problem: http://answers.gazebosim.org/question/24459/model-contact-with-ground-issue/
          solution: see: http://answers.gazebosim.org/question/3334/slip1-slip2-in-urdf/-->
      <kp>1000000.0</kp>
      <kd>10.0</kd>
      <mu1>0.0</mu1>
      <mu2>0.0</mu2>
      <fdir1>1 0 0</fdir1>
      <maxVel>1.0</maxVel>
      <minDepth>0.00</minDepth>
  </gazebo>


  <!--+++++++++++++++++++++++++++++++++++RIGHT CASTOR+++++++++++++++++++++++++++++++++++++++++++++++++++-->


  <!--right_caster_plate_link is a well named link :-) -->
  <xacro:box_link link_name="right_castor_mount" length="${castor_mount_link_length}" 
                                                 width="${castor_mount_link_width}"
                                                 height="${castor_mount_link_height}" material="black"
                                                 mass="${castor_mount_link_mass}">  
    <origin xyz="0 0 0" rpy="0 0 0" /> 
  </xacro:box_link>

   <!--        -->
  <xacro:fixed_joint name="base_to_right_castor_mount" parent="base" child="right_castor_mount">
    <origin xyz="-0.40 0 0"/>
  </xacro:fixed_joint>

  <!--right_caster_dummy to give the castor wheel rotation about the Z axis -->
  <xacro:box_link link_name="right_castor_dummy" length="${castor_mount_dummy_link_length}" 
                                                 width="${castor_mount_dummy_link_width}" 
                                                 height="${castor_mount_dummy_link_height}" material="orange"
                                                 mass="${castor_mount_dummy_link_mass}">  
    <origin xyz="0 0 0" rpy="0 0 0" /> 
  </xacro:box_link>

  <!--joint between right castor mount and dummy link to allow rotation of castor wheel about z axis-->
  <xacro:continuous_joint name="right_castor_mount_to_right_castor_dummy" rpy="0 0 0" xyz="0 0 1" 
                          parent="right_castor_mount" child="right_castor_dummy" friction="${friction_val}">
    <origin xyz="0.0 0.0  -0.01"/>
  </xacro:continuous_joint>


  <!--right_castor_wheel_link is a well named link :-) -->
  <xacro:cylinder_link link_name="right_castor_wheel" length="${castor_wheel_length}" radius="${castor_wheel_radius}"
                       material="Black" mass="${castor_wheel_mass}"> 
    <origin xyz="0 0 0" rpy="${pi/2} 0 0"/> 
  </xacro:cylinder_link>

  <!--        -->
  <xacro:continuous_joint name="right_castor_dummy_to_right_castor_wheel" rpy="0 0 0" xyz="0 1 0" 
                          parent="right_castor_dummy" child="right_castor_wheel" friction="${friction_val}">
    <origin xyz="-0.0  0 -0.07"/>
  </xacro:continuous_joint>

  

</robot>